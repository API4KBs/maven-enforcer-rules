## KMDP Master Pipeline
## KMDP MVN Enforcer Rules

pool:
  vmImage: 'ubuntu-latest'

variables: 
  - group: kmdp-platform-variables

steps:

# ------------------ PIPELINE STEPS  ------------------
- script: |
    echo Starting KMDP MVN Enforcer Rules Master Branch!
  displayName: 'Pipeline Steps Started'

- task: PowerShell@2
  displayName: 'Git Config User'
  inputs:
    targetType: 'inline'
    script: |
      git config --global user.email "$env:GIT_USER_EMAIL"
      git config --global user.name "$env:GIT_USER_NAME"
      Write-Host Email: "$env:GIT_USER_EMAIL"
      Write-Host User Name: "$env:GIT_USER_NAME"
  env:
    GIT_USER_EMAIL: $(gitUserEmail)
    GIT_USER_NAME: $(gitUserName)

# Download Secure Settings m2 File
- task: DownloadSecureFile@1
  displayName: 'Download Secure m2'
  name: settingsxml
  inputs:
    secureFile: settings-dev.xml

# Write settings file to Build Server
- task: PowerShell@2
  displayName: 'Update m2 Settings File'
  inputs:
    targetType: 'inline'
    script: |
      New-Item -Type Directory -Force "${HOME}/.m2"
      Copy-Item -Force "$(settingsxml.secureFilePath)" "${HOME}/.m2/settings.xml"

# Authenticate to Maven Feed 
- task: MavenAuthenticate@0
  displayName: 'Maven Authenticate'
  inputs:
    artifactsFeeds: 'KMD'

# Rebase to master and deploy
- task: PowerShell@2
  displayName: 'MVN Enforcer Rules Checkout Release Candidate'
  inputs:
    targetType: 'inline'
    script: |
      Write-Host ------ Starting Checkout ------
      # Checkout master branch to create release candidate from
      git branch -a
      git checkout "release-$env:MVN_ENFORCER_RELEASE_VERSION"
      git status
      git checkout master
      # rebase the release version
      git pull "https://kmd:$env:SYSTEM_ACCESSTOKEN@dev.azure.com/mclm/KMD/_git/kmdp-mvn-enforcer-rules"
      git status
      git rebase "release-$env:MVN_ENFORCER_RELEASE_VERSION" 
      git status
      type pom.xml
  env:
    MVN_ENFORCER_RELEASE_VERSION: $(tier0MvnEnforcerReleaseVersion)
    SYSTEM_ACCESSTOKEN: $(system.accesstoken)

# SLM Versioning Policy (No Version Change)
- task: AlmVersioning@4
  displayName: 'SLM Update Version/Build #'
  inputs:
    projectType: java
    versionFilePath: pom.xml
    versionTransformation: none

# Clean install and deploy
- task: PowerShell@2
  displayName: 'MVN Enforcer Rules Checkout Release Candidate'
  inputs:
    targetType: 'inline'
    script: |
      Write-Host ------ Starting Checkout ------
      mvn clean install -Prelease --no-transfer-progress 
      mvn deploy "-DaltDeploymentRepository=KMD::default::https://pkgs.dev.azure.com/mclm/_packaging/KMD/maven/v1" --no-transfer-progress 
      git add .
      git commit -a -m "update master branch for new version: $env:MVN_ENFORCER_RELEASE_VERSION"
      git push "https://kmd:$env:SYSTEM_ACCESSTOKEN@dev.azure.com/mclm/KMD/_git/kmdp-mvn-enforcer-rules"
      git push "https://kmd:$env:SYSTEM_ACCESSTOKEN@dev.azure.com/mclm/KMD/_git/kmdp-mvn-enforcer-rules" -d "release-$env:MVN_ENFORCER_RELEASE_VERSION"
      Write-Host ------ Ending Checkout ------
  env:
    MVN_ENFORCER_RELEASE_VERSION: $(tier0MvnEnforcerReleaseVersion)
    SYSTEM_ACCESSTOKEN: $(system.accesstoken)

# ------------------ END PIPELINE  ------------------
- script: |
    echo Ending Master MVN Enforcer Rules Pipeline!
  displayName: 'Pipeline Steps Ended' 
