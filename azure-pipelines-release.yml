## KMDP Release Candidate Pipeline
## KMDP MVN Enforcer Rules

pool:
  vmImage: 'ubuntu-latest'

variables: 
  - group: kmdp-platform-variables

steps:

# ------------------ PIPELINE STEPS  ------------------
- script: |
    echo Starting KMDP Release Candidate MVN Enforcer Rules Branches!
  displayName: 'Pipeline Steps Started'

- task: PowerShell@2
  displayName: 'Git Config User'
  inputs:
    targetType: 'inline'
    script: |
      git config --global user.email "$env:GIT_USER_EMAIL"
      git config --global user.name "$env:GIT_USER_NAME"
      Write-Host Email: "$env:GIT_USER_EMAIL"
      Write-Host User Name: "$env:GIT_USER_NAME"
  env:
    GIT_USER_EMAIL: $(gitUserEmail)
    GIT_USER_NAME: $(gitUserName)

# Download Secure Settings m2 File
- task: DownloadSecureFile@1
  displayName: 'Download Secure m2'
  name: settingsxml
  inputs:
    secureFile: settings-dev.xml

# Write settings file to Build Server
- task: PowerShell@2
  displayName: 'Update m2 Settings File'
  inputs:
    targetType: 'inline'
    script: |
      New-Item -Type Directory -Force "${HOME}/.m2"
      Copy-Item -Force "$(settingsxml.secureFilePath)" "${HOME}/.m2/settings.xml"

# Authenticate to Maven Feed 
- task: MavenAuthenticate@0
  displayName: 'Maven Authenticate'
  inputs:
    artifactsFeeds: 'KMD'

# Create Release Branch 
- task: PowerShell@2
  displayName: 'MVN Enforcer Rules Checkout Release Candidate'
  inputs:
    targetType: 'inline'
    script: |
      Write-Host ------ Starting Checkout ------
      # Checkout develop branch to create release candidate from
      git checkout --track origin/develop
      # Create release version
      git checkout -b "release-$env:MVN_ENFORCER_RELEASE_VERSION"
      # mvn set version of release branch root pom and then clean install
      mvn versions:set "-DnewVersion=$env:MVN_ENFORCER_RELEASE_VERSION" --no-transfer-progress 
      mvn clean install -Prelease --no-transfer-progress 
      Write-Host ------ Ending Checkout ------
  env:
    MVN_ENFORCER_RELEASE_VERSION: $(tier0MvnEnforcerReleaseVersion)

## Check New Develop Version
- task: PowerShell@2
  displayName: 'MVN Enforcer Rules Check Develop'
  inputs:
    targetType: 'inline'
    script: |
      Write-Host ------ Starting Checkout ------
      # Checkout release branch to commit
      git add .
      git commit -a -m "candidate release $env:MVN_ENFORCER_RELEASE_VERSION"
      # Check develop branch to rebase
      git checkout develop
      git rebase "release-$env:MVN_ENFORCER_RELEASE_VERSION"
      mvn versions:set "-DnewVersion=$env:MVN_ENFORCER_NEW_DEV_VERSION" -DallowSnapshots=true --no-transfer-progress 
      mvn clean install --no-transfer-progress 
      Write-Host ------ Ending Checkout ------
  env:
    MVN_ENFORCER_RELEASE_VERSION: $(tier0MvnEnforcerReleaseVersion)
    MVN_ENFORCER_NEW_DEV_VERSION: $(tier0MvnEnforcerNewDevVersion)

# Push to develop branches/release candidate branches
- task: PowerShell@2
  displayName: 'Push Develop Branch Release Candidates'
  inputs:
    targetType: 'inline'
    script: |
      Write-Host ------ Starting Checkout ------
      Write-Host ------ Pushing Develop Branch ------
      git add .
      git commit -a -m "[skip ci] update develop branch for new version: $env:MVN_ENFORCER_NEW_DEV_VERSION"
      git push "https://kmd:$env:SYSTEM_ACCESSTOKEN@dev.azure.com/mclm/KMD/_git/kmdp-mvn-enforcer-rules"
      Write-Host ------ Pushing Release Candidate Branch ------
      git checkout "release-$env:MVN_ENFORCER_RELEASE_VERSION"
      git push --set-upstream "https://kmd:$env:SYSTEM_ACCESSTOKEN@dev.azure.com/mclm/KMD/_git/kmdp-mvn-enforcer-rules" "release-$env:MVN_ENFORCER_RELEASE_VERSION"
      Write-Host ------ Ending  Checkout ------
  env:
    MVN_ENFORCER_RELEASE_VERSION: $(tier0MvnEnforcerReleaseVersion)
    MVN_ENFORCER_NEW_DEV_VERSION: $(tier0MvnEnforcerNewDevVersion)
    SYSTEM_ACCESSTOKEN: $(system.accesstoken)

# ------------------ END PIPELINE  ------------------
- script: |
    echo Ending Release Candidate MVN Enforcer Rules Pipeline!
  displayName: 'Pipeline Steps Ended' 
